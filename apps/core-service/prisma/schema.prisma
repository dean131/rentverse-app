// File Path: apps/core-service/prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
// Enums provide a set of predefined values for a field.

enum Role {
  ADMIN
  PROPERTY_OWNER
  TENANT
}

enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
  SOLD
  RENTED
}

enum ListingType {
  SALE
  RENT
  BOTH
}

enum PropertyType {
  APARTMENT
  HOUSE
  PENTHOUSE
  STUDIO
  COMMERCIAL
}

enum FurnishingStatus {
  FULLY_FURNISHED
  PARTIALLY_FURNISHED
  UNFURNISHED
}

enum PaymentPeriod {
  MONTHLY
  QUARTERLY
  BI_ANNUALLY
  YEARLY
}

enum DocumentType {
  OWNERSHIP_CERTIFICATE
  FLOOR_PLAN
  OTHER
}

// NEW: Enum to track the status of a booking/tenancy agreement
enum TenancyStatus {
  PENDING_OWNER_APPROVAL
  OWNER_REJECTED
  PENDING_TENANT_PAYMENT
  PENDING_SIGNATURES
  ACTIVE
  COMPLETED
  CANCELLED
}

// --- MODELS ---

model User {
  id                Int      @id @default(autoincrement())
  fullName          String
  email             String   @unique
  password          String
  phone             String?
  country           String?
  profilePictureUrl String?
  role              Role     @default(TENANT)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  properties        Property[]
  refreshToken      RefreshToken?
  createdAgreements TenancyAgreement[] @relation("OwnerAgreements")
  tenantAgreements  TenancyAgreement[] @relation("TenantAgreements")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Property {
  id               Int              @id @default(autoincrement())
  title            String
  description      String
  status           PropertyStatus   @default(PENDING)
  listingType      ListingType
  propertyType     PropertyType
  rentalPrice      Float?
  paymentPeriod    PaymentPeriod?
  sizeSqft         Int
  bedrooms         Int
  bathrooms        Int
  furnishingStatus FurnishingStatus
  latitude         Float?
  longitude        Float?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  listedBy          User               @relation(fields: [listedById], references: [id])
  listedById        Int
  project           Project?           @relation(fields: [projectId], references: [id])
  projectId         Int?
  images            PropertyImage[]
  documents         PropertyDocument[]
  amenities         PropertyAmenity[]
  views             PropertyView[]
  tenancyAgreements TenancyAgreement[]
}

model Project {
  id          Int        @id @default(autoincrement())
  projectName String
  address     String
  latitude    Float?
  longitude   Float?
  properties  Property[]
}

model PropertyImage {
  id           Int      @id @default(autoincrement())
  imageUrl     String
  displayOrder Int      @default(0)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   Int
}

model PropertyDocument {
  id           Int          @id @default(autoincrement())
  fileUrl      String
  documentType DocumentType
  uploadedAt   DateTime     @default(now())
  property     Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   Int
}

model Amenity {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  properties PropertyAmenity[]
}

model View {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  properties PropertyView[]
}

// NEW: Model to manage the entire booking and tenancy lifecycle
model TenancyAgreement {
  id                 Int           @id @default(autoincrement())
  status             TenancyStatus @default(PENDING_OWNER_APPROVAL)
  startDate          DateTime
  endDate            DateTime
  rentAmount         Float
  docusignEnvelopeId String?       @unique
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  owner      User     @relation("OwnerAgreements", fields: [ownerId], references: [id])
  ownerId    Int
  tenant     User     @relation("TenantAgreements", fields: [tenantId], references: [id])
  tenantId   Int
}

// --- JOIN TABLES for Many-to-Many Relationships ---

model PropertyAmenity {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId  Int

  @@id([propertyId, amenityId])
}

model PropertyView {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  view       View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     Int

  @@id([propertyId, viewId])
}
